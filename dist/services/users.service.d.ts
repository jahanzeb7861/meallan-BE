import { Repository } from 'typeorm';
import { User } from 'src/entities/User.entity';
import { createUserDto } from 'src/dtos/users/CreateUser.dto';
import { UpdateUserDto } from 'src/dtos/users/UpdateUser.dto';
import { Profile } from 'src/entities/Profile.entity';
import { JwtService } from "@nestjs/jwt";
import { LoginUserDto } from 'src/dtos/users/Login-user.dto';
import { ForgotPasswordDto } from 'src/dtos/passwords/forgot-password.dto';
import { ChangePasswordDto } from 'src/dtos/passwords/change-password.dto';
import { ConfigService } from '@nestjs/config';
import { MailsService } from './mails.service';
import { Restaurant } from 'src/entities/Restaurant.entity';
export declare class UsersService {
    private userRepository;
    private profileRepository;
    private restaurantRepository;
    private jwtService;
    private configService;
    private mailService;
    private readonly appUrl;
    constructor(userRepository: Repository<User>, profileRepository: Repository<Profile>, restaurantRepository: Repository<Restaurant>, jwtService: JwtService, configService: ConfigService, mailService: MailsService);
    findUsers(): Promise<User[]>;
    createUser(createUserDto: createUserDto, profile: string): Promise<User>;
    createCashier(createUserDto: createUserDto, restaurantId: string): Promise<User>;
    updateUser(id: number, updateUserDto: UpdateUserDto): Promise<import("typeorm").UpdateResult>;
    deleteUser(id: number): Promise<import("typeorm").DeleteResult>;
    login(user: LoginUserDto): Promise<string>;
    private mailExists;
    private findOne;
    findByEmail(email: string): Promise<User>;
    hashPasword(password: string): Promise<string>;
    comparePasswords(password: string, storedPassword: string): Promise<boolean>;
    generateJwt(user: any): Promise<string>;
    validateUser(email: string, pass: string): Promise<any>;
    validateUserOauth2(email: string): Promise<any>;
    loginOauth2(req: any): Promise<string>;
    forgotPassword(forgotPasswordDto: ForgotPasswordDto): Promise<void>;
    changePassword(token: string, changePasswordDto: ChangePasswordDto): Promise<boolean>;
}
